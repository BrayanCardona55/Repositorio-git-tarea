/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package Principal;
import BD.ConexionBD;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.springframework.security.crypto.bcrypt.BCrypt;
/**
 *
 * @author braya
 */
public class Crearusuario extends javax.swing.JDialog {

    /**
     * Creates new form Crearusuario
     * @param parent
     * @param modal
     */
    public Crearusuario(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        cargarUsuarios();
        rbgroles.add(rdbadmin);
rbgroles.add(rdbrecepcionista);
    }
         private void cargarUsuarios() {
            DefaultTableModel modelo = new DefaultTableModel();
    modelo.addColumn("ID");
    modelo.addColumn("Usuario");
    modelo.addColumn("Contraseña");  // Solo se mostrará como "********"
    modelo.addColumn("Rol");

    ConexionBD conexionBD = new ConexionBD();
    if (conexionBD.conectar()) {
        Connection con = conexionBD.getConexion();

        if (con != null) {
            try {
                String sql = "SELECT id, username, rol FROM usuarios"; // 🔥 NO seleccionamos password_hash
                try (PreparedStatement pst = con.prepareStatement(sql); 
                     ResultSet rs = pst.executeQuery()) {
                    while (rs.next()) {
                        Object[] fila = {
                            rs.getInt("id"),
                            rs.getString("username"),
                            "********",  // 🔒 No mostramos la contraseña real
                            rs.getString("rol")
                        };
                        modelo.addRow(fila);
                    }
                }
                conexionBD.cerrarConexion();
            } catch (SQLException e) {
                System.out.println("Error al cargar usuarios: " + e.getMessage());
            }
        } else {
            System.out.println("Error: la conexión es NULL.");
        }
    } else {
        System.out.println("No se pudo conectar a la base de datos.");
    }

    TablaUsuarios.setModel(modelo);  // Asignamos el modelo a la tabla
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rbgroles = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablaUsuarios = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        bttagregar = new javax.swing.JButton();
        rdbadmin = new javax.swing.JRadioButton();
        rdbrecepcionista = new javax.swing.JRadioButton();
        txtusuario = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        btteditar = new javax.swing.JButton();
        lblcodigo = new javax.swing.JLabel();
        txtcontrasena = new javax.swing.JPasswordField();
        txtrepetircontraseña = new javax.swing.JPasswordField();
        txtbuscar = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        bttbuscar = new javax.swing.JButton();
        lblmensaje = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Crear Usuario");

        TablaUsuarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TablaUsuarios.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaUsuariosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TablaUsuarios);

        jPanel1.setBackground(java.awt.SystemColor.textHighlight);

        bttagregar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        bttagregar.setText("Agregar");
        bttagregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttagregarActionPerformed(evt);
            }
        });

        rdbadmin.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        rdbadmin.setForeground(new java.awt.Color(255, 255, 255));
        rdbadmin.setText("Admin");
        rdbadmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbadminActionPerformed(evt);
            }
        });

        rdbrecepcionista.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        rdbrecepcionista.setForeground(new java.awt.Color(255, 255, 255));
        rdbrecepcionista.setText("Recepcionista");

        txtusuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtusuarioActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Usuario");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Codigo");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Contraseña");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Repetir");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Contraseña");

        btteditar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btteditar.setText("Editar");
        btteditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btteditarActionPerformed(evt);
            }
        });

        lblcodigo.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblcodigo.setForeground(new java.awt.Color(255, 255, 255));
        lblcodigo.setText("---");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(46, 46, 46)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblcodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtrepetircontraseña, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE)
                            .addComponent(txtusuario, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtcontrasena, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(rdbrecepcionista, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rdbadmin, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(bttagregar, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btteditar, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(lblcodigo))
                .addGap(7, 7, 7)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtusuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(rdbrecepcionista)
                    .addComponent(rdbadmin))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(bttagregar)
                        .addComponent(txtcontrasena, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(btteditar)
                    .addComponent(txtrepetircontraseña, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Lista de usuarios");

        bttbuscar.setBackground(java.awt.SystemColor.textHighlight);
        bttbuscar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        bttbuscar.setForeground(new java.awt.Color(255, 255, 255));
        bttbuscar.setText("Buscar");
        bttbuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttbuscarActionPerformed(evt);
            }
        });

        lblmensaje.setForeground(new java.awt.Color(102, 0, 51));
        lblmensaje.setText("-");

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 540, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtbuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(bttbuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(lblmensaje, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtbuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bttbuscar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblmensaje)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rdbadminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbadminActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdbadminActionPerformed

    private void bttagregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttagregarActionPerformed
// Obtener los datos del formulario
    String username = txtusuario.getText();
    String password = txtcontrasena.getText();

    // Validar que se haya seleccionado un rol
    if (!rdbadmin.isSelected() && !rdbrecepcionista.isSelected()) {
        JOptionPane.showMessageDialog(this, "Debe seleccionar un rol.", "Error", JOptionPane.ERROR_MESSAGE);
        return; // Detener la ejecución si no hay selección
    }

    String rol = rdbadmin.isSelected() ? "admin" : "recepcionista";

    // Validar que las contraseñas coinciden
    if (!password.equals(txtrepetircontraseña.getText())) {
        JOptionPane.showMessageDialog(this, "Las contraseñas no coinciden.", "Error", JOptionPane.ERROR_MESSAGE);
        return;  // Salir si las contraseñas no coinciden
    }

    // Hashear la contraseña con BCrypt
    String passwordHash = BCrypt.hashpw(password, BCrypt.gensalt());

    // Conectar a la base de datos
    ConexionBD conexionBD = new ConexionBD();
    if (conexionBD.conectar()) {  // Conectamos a la BD
        Connection con = conexionBD.getConexion(); // Obtenemos la conexión

        if (con != null) {  // Verificamos que la conexión no sea null
            try {
                // Consulta para insertar el nuevo usuario
                String sql = "INSERT INTO usuarios (username, password_hash, rol) VALUES (?, ?, ?)";
                try (PreparedStatement pst = con.prepareStatement(sql)) {
                    pst.setString(1, username);        // Establecer el nombre de usuario
                    pst.setString(2, passwordHash);    // Establecer la contraseña hasheada
                    pst.setString(3, rol);             // Establecer el rol

                    int filasAfectadas = pst.executeUpdate();  // Ejecutar la consulta
                    if (filasAfectadas > 0) {
                        JOptionPane.showMessageDialog(this, "Usuario agregado con éxito.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(this, "Error al agregar el usuario.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Error al agregar usuario: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            } finally {
                conexionBD.cerrarConexion();  // Cerramos la conexión
            }
        } else {
            JOptionPane.showMessageDialog(this, "Error: la conexión es NULL.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } else {
        JOptionPane.showMessageDialog(this, "No se pudo conectar a la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_bttagregarActionPerformed

    private void txtusuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtusuarioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtusuarioActionPerformed

    private void bttbuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttbuscarActionPerformed
String busqueda = txtbuscar.getText().trim();  // Obtener el valor de búsqueda

    if (busqueda.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Por favor ingrese un valor para buscar.", "Error", JOptionPane.ERROR_MESSAGE);
        return;  // Detener si el campo está vacío
    }

    // Conectar a la base de datos
    ConexionBD conexionBD = new ConexionBD();
    if (conexionBD.conectar()) {  // Conectamos a la BD
        Connection con = conexionBD.getConexion();  // Obtenemos la conexión

        if (con != null) {  // Verificamos que la conexión no sea null
            try {
                String sql = "";
                PreparedStatement pst = null;
                
                // Determinar si la búsqueda es por ID, usuario o rol
                if (busqueda.matches("\\d+")) {  // Si la búsqueda es un número, se busca por ID
                    sql = "SELECT id, username, rol FROM usuarios WHERE id = ?";
                    pst = con.prepareStatement(sql);
                    pst.setInt(1, Integer.parseInt(busqueda));  // Establecer el ID

                } else if (busqueda.matches("[a-zA-Z0-9]+")) {  // Si es alfanumérico, buscar por username o rol
                    sql = "SELECT id, username, rol FROM usuarios WHERE username LIKE ? OR rol LIKE ?";
                    pst = con.prepareStatement(sql);
                    pst.setString(1, "%" + busqueda + "%");  // Buscar por username
                    pst.setString(2, "%" + busqueda + "%");  // Buscar por rol
                }

                // Ejecutar la consulta
                if (pst != null) {
                    try (ResultSet rs = pst.executeQuery()) {
                        DefaultTableModel modelo = (DefaultTableModel) TablaUsuarios.getModel();
                        modelo.setRowCount(0);  // Limpiar la tabla antes de mostrar los resultados

                        while (rs.next()) {
                            // Agregar los resultados a la tabla
                            Object[] fila = {
                                rs.getInt("id"),
                                rs.getString("username"),
                                rs.getString("rol")
                            };
                            modelo.addRow(fila);
                        }

                        if (modelo.getRowCount() == 0) {
                            JOptionPane.showMessageDialog(this, "No se encontró el usuario.", "Resultado de búsqueda", JOptionPane.INFORMATION_MESSAGE);
                        }
                    }
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Error al realizar la búsqueda: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            } finally {
                conexionBD.cerrarConexion();  // Cerramos la conexión
            }
        } else {
            JOptionPane.showMessageDialog(this, "No se pudo conectar a la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } else {
        JOptionPane.showMessageDialog(this, "Error: la conexión es NULL.", "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_bttbuscarActionPerformed

    private void btteditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btteditarActionPerformed
     lblmensaje.setText("");
// Obtener la fila seleccionada en la tabla
    int filaSeleccionada = TablaUsuarios.getSelectedRow();

    if (filaSeleccionada == -1) {
        // Si no se selecciona ninguna fila, mostrar un mensaje de error
        JOptionPane.showMessageDialog(this, "Por favor, selecciona un usuario para editar.", "Error", JOptionPane.ERROR_MESSAGE);
        return; // No continuar si no hay fila seleccionada
    }

    // Obtener los datos del usuario seleccionado
    int idUsuario = (int) TablaUsuarios.getValueAt(filaSeleccionada, 0);  // Asumiendo que el ID está en la primera columna
    String nombreUsuario = (String) TablaUsuarios.getValueAt(filaSeleccionada, 1);  // Nombre de usuario
    String contrasenaUsuario = (String) TablaUsuarios.getValueAt(filaSeleccionada, 2);  // Contraseña (encriptada)
    String rolUsuario = (String) TablaUsuarios.getValueAt(filaSeleccionada, 3);  // Rol

    // Obtener los valores de los campos de texto
    String nuevoUsuario = txtusuario.getText();
    String nuevaContraseña = txtcontrasena.getText();
    String repetirContraseña = txtrepetircontraseña.getText();
    String rolSeleccionado = rdbadmin.isSelected() ? "admin" : "recepcionista";

    // Si el campo de usuario está vacío, mostrar mensaje de error
    if (nuevoUsuario.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Por favor, completa el campo de usuario.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Si la contraseña ha cambiado, verificar que las contraseñas coincidan
    if (!nuevaContraseña.isEmpty()) {
        if (!nuevaContraseña.equals(repetirContraseña)) {
            JOptionPane.showMessageDialog(this, "Las contraseñas no coinciden.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Encriptar la nueva contraseña con BCrypt
        nuevaContraseña = BCrypt.hashpw(nuevaContraseña, BCrypt.gensalt());
    } else {
        // Si no se cambia la contraseña, usar la contraseña actual
        nuevaContraseña = contrasenaUsuario;
    }

    // Conectar a la base de datos y actualizar el usuario
    ConexionBD conexionBD = new ConexionBD();
    if (conexionBD.conectar()) {
        Connection con = conexionBD.getConexion();
        if (con != null) {
            try {
                // Crear el SQL para actualizar el usuario
                String sql = "UPDATE usuarios SET username = ?, password_hash = ?, rol = ? WHERE id = ?";
                PreparedStatement pst = con.prepareStatement(sql);
                pst.setString(1, nuevoUsuario);
                pst.setString(2, nuevaContraseña);  // Usar la contraseña encriptada
                pst.setString(3, rolSeleccionado);
                pst.setInt(4, idUsuario);

                // Ejecutar la actualización
                int filasAfectadas = pst.executeUpdate();
                if (filasAfectadas > 0) {
                    JOptionPane.showMessageDialog(this, "Usuario actualizado correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                    cargarUsuarios();  // Actualizar la tabla
                } else {
                    JOptionPane.showMessageDialog(this, "No se pudo actualizar el usuario.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Error al actualizar el usuario: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            } finally {
                conexionBD.cerrarConexion();  // Cerrar la conexión
            }
        } else {
            JOptionPane.showMessageDialog(this, "No se pudo conectar a la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    }//GEN-LAST:event_btteditarActionPerformed

    private void TablaUsuariosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaUsuariosMouseClicked
   // Obtener la fila seleccionada
    int filaSeleccionada = TablaUsuarios.getSelectedRow();

    if (filaSeleccionada != -1) {
        // Obtener los datos del usuario
        int idUsuario = (int) TablaUsuarios.getValueAt(filaSeleccionada, 0);
        String nombreUsuario = (String) TablaUsuarios.getValueAt(filaSeleccionada, 1);
        String contrasenaUsuario = (String) TablaUsuarios.getValueAt(filaSeleccionada, 2); // Esta es la contraseña encriptada
        String rolUsuario = (String) TablaUsuarios.getValueAt(filaSeleccionada, 3);

        // Establecer los valores en los campos de texto
        lblcodigo.setText(String.valueOf(idUsuario));  // Mostrar el ID
        txtusuario.setText(nombreUsuario);  // Mostrar el nombre de usuario

        // Limpiar los campos de contraseña (no podemos mostrar la contraseña en texto claro)
        txtcontrasena.setText("");  // Dejar vacío para que el usuario ingrese una nueva contraseña
        txtrepetircontraseña.setText("");  // Dejar vacío también

        // Seleccionar el rol
        if (rolUsuario.equals("admin")) {
            rdbadmin.setSelected(true);
        } else {
            rdbrecepcionista.setSelected(true);
        }

         lblmensaje.setText("La contraseña está encriptada y no puede mostrarse. Ingresa una nueva antes de editar.");
    }
    }//GEN-LAST:event_TablaUsuariosMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Crearusuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Crearusuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Crearusuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Crearusuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Crearusuario dialog = new Crearusuario(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TablaUsuarios;
    private javax.swing.JButton bttagregar;
    private javax.swing.JButton bttbuscar;
    private javax.swing.JButton btteditar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblcodigo;
    private javax.swing.JLabel lblmensaje;
    private javax.swing.ButtonGroup rbgroles;
    private javax.swing.JRadioButton rdbadmin;
    private javax.swing.JRadioButton rdbrecepcionista;
    private javax.swing.JTextField txtbuscar;
    private javax.swing.JPasswordField txtcontrasena;
    private javax.swing.JPasswordField txtrepetircontraseña;
    private javax.swing.JTextField txtusuario;
    // End of variables declaration//GEN-END:variables
}
